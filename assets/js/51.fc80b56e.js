(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{348:function(n,s,a){"use strict";a.r(s);var r=a(10),t=Object(r.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"手写bind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手写bind"}},[n._v("#")]),n._v(" 手写bind")]),n._v(" "),s("p",[n._v("https://www.jianshu.com/p/6d8250fcfc11")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("if(Function.prototype.bind === undefined){\n    console.log('您的浏览器不支持bind方法! 开始使用手写bind功能!');\n    Function.prototype.bind = function(obj){\n        var arg1 = [].slice.call(arguments,1);  // 解释一下骚操作，用arg1 保留了 当函数调用bind方法时候传  入的参数，因为arguments是类数组对象，我们借用了数组的slice方法\n        var fun = this; // fun —> bind调用者(也就是某个函数)\n        return function(){\n            fun.apply(obj,arg1.concat([].slice.call(arguments,1)));\n            //  好像又引入了apply这种骚东西，是的后面我们再分析。\n            //  这里返回了一个闭包函数， 里面可以使用 obj ， arg1 ， fun 这些变量，配合起来实现了bind\n            //  感兴趣的朋友可以用ie8测试 bind已经生效了  \n        }\n}\n}else{\n    console.log('您的浏览器支持bind方法！')\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h1",{attrs:{id:"手写promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手写promise"}},[n._v("#")]),n._v(" 手写promise")]),n._v(" "),s("h1",{attrs:{id:"如何判断一个数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断一个数组"}},[n._v("#")]),n._v(" 如何判断一个数组")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('方法一： 使用instanceof方法\ninstanceof 用于判断一个变量是否某个对象的实例，左边操作数是一个对象，右边操作数是一个函数对象或者函数构造器。原理是通过判断左操作数的对象的原型链上是否具有右操作数的构造函数的prototype属性。\na instanceof b?alert("true"):alert("false")  //注意b值是你想要判断的那种数据类型，不是一个字符串，比如Array。\n举一个例子：\nvar arr=[];\nconsole.log(arr instanceof Array) //返回true\n\n方法二： 使用constructor方法\n在W3C定义中的定义：constructor 属性返回对创建此对象的数组函数的引用，就是返回对象相对应的构造函数。从定义上来说跟instanceof不太一致，但效果都是一样的。\n那么判断各种类型的方法：\nconsole.log([].constructor == Array);  //true\nconsole.log({}.constructor == Object);  //true\nconsole.log("string".constructor == String); //true\nconsole.log((123).constructor == Number);  //true\nconsole.log(true.constructor == Boolean);  //true\n注意：\n使用instaceof和construcor,被判断的array必须是在当前页面声明的！\n\n方法三： 使用Object.prototype.toString.call(arr) === \'[object Array]\'方法\nfunction isArray(o) {\n　　return Object.prototype.toString.call(o);\n}\nvar arr=[2,5,6,8];\nvar obj={name:\'zhangsan\',age:25};\nvar fn = function () {}\nconsole.log(isArray(arr)); //[object Array]\nconsole.log(isArray(obj)); //[object Object]\nconsole.log(isArray(fn));  //[object function]\n\n方法四：ES5定义了Array.isArray:\nArray.isArray([]) //true\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);