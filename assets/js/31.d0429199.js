(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{331:function(t,e,s){"use strict";s.r(e);var a=s(10),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react-hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-hooks"}},[t._v("#")]),t._v(" React - hooks")]),t._v(" "),e("h2",{attrs:{id:"hook是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hook是什么"}},[t._v("#")]),t._v(" Hook是什么?")]),t._v(" "),e("ol",[e("li",[t._v("Hook 是什么？"),e("br"),t._v(" Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如，useState 是允许你在 React 函数组件中添加 state 的 Hook。")]),t._v(" "),e("li",[t._v("产生原因：可利用js的闭包机制，不用额外的api。")])]),t._v(" "),e("h2",{attrs:{id:"usestate-一些介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate-一些介绍"}},[t._v("#")]),t._v(" useState() 一些介绍")]),t._v(" "),e("ol",[e("li",[e("b",[t._v(" 调用 useState 方法的时候做了什么?")]),t._v(" "),e("br"),t._v("\n它定义一个 “state 变量”。可以叫任何名字。这是一种在函数调用时保存变量的方式 —— useState 是一种新方法，它与 class 里面的 this.state 提供的功能完全相同。")]),t._v(" "),e("li",[e("b",[t._v(" useState 需要哪些参数？")]),t._v(" "),e("br"),t._v("\nuseState() 方法里面唯一的参数就是初始 state")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 “count” 的 state 变量\n  const [count, setCount] = useState(0);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("等号左边名字并不是 React API 的部分，数组解构,你可以自己取名字"),e("br")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const [fruit, setFruit] = useState('banana');\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("count是‘state变量’"),e("br"),t._v("\n0是count变量的初始值"),e("br"),t._v("\n如果想在state中存褚两个变量，只需要调用useState()两次即可。"),e("br"),t._v("\n我们声明了一个叫 count 的 state 变量，然后把它设为 0。React 会在重复渲染时记住它当前的值，并且提供最新的值给我们的函数。我们可以通过调用 setCount 来更新当前的 count。"),e("br"),t._v("\n3. "),e("b",[t._v("useState 方法的返回值是什么？")]),e("br"),t._v("\n返回值为：当前 state 以及更新 state 的函数。"),e("br"),t._v("\n这就是我们写 const [count, setCount] = useState() 的原因。这与 class 里面 this.state.count 和 this.setState 类似，唯一区别就是你需要成对的获取它们。")]),t._v(" "),e("h2",{attrs:{id:"useeffect-一些介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect-一些介绍"}},[t._v("#")]),t._v(" useEffect() 一些介绍")]),t._v(" "),e("h3",{attrs:{id:"总结的几个特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结的几个特性"}},[t._v("#")]),t._v(" 总结的几个特性：")]),t._v(" "),e("ol",[e("li",[t._v("Dom更新完毕，每次渲染后都会执行（替代旧API的 componentDidMount、componentDidUpdate、componentWillUnmount）")]),t._v(" "),e("li",[t._v("提供清除函数。（每个useEffect中都返回一个函数，该函数将会在componentWillUnmount时刻执行）")]),t._v(" "),e("li",[t._v("避免更新逻辑的常见bug （ componentDidUpDate(prevProps, prevState) ）")]),t._v(" "),e("li",[t._v("性能优化 (根据判断count值是否发生变化来决定知否执行useEffect，该参数为选填项，不填时，默认执行一次)")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    useEffect(()=>{\n        ...\n    }, [count]);\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("ol",{attrs:{start:"5"}},[e("li",[t._v("按照调用顺序执行useEffect()。Hook在组件最顶层调用。")]),t._v(" "),e("li",[t._v("Hook使用规则：不可在循环、表达式、嵌套中用Hook。")]),t._v(" "),e("li",[t._v("自定义Hook：将可复用的Hook封装成Hook函数，必须以use开头")]),t._v(" "),e("li",[t._v("多个Hook共享信息：useState中声明的state变量可以在serEffect中使用。")]),t._v(" "),e("li",[t._v("Hook-API： Hook将一些常用的API进行了统一封装。\n"),e("br"),t._v("基础Hook包括：useState、useEffect、useContext等；\n"),e("br"),t._v(" 额外Hook包括：useReducer、useCallback、useMemo、useRef、useImperativeHandle、useLayoutEffect、useDebugValue")])])])}),[],!1,null,null,null);e.default=n.exports}}]);