(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{377:function(n,s,a){"use strict";a.r(s);var e=a(10),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"定义类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义类型"}},[n._v("#")]),n._v(" 定义类型")]),n._v(" "),s("p",[s("b",[n._v(" 类型推断机制， 初始化什么类型， 数据就是什么类型")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 布尔类型\nlet isDone:boolean = true;\n\n// 字符串类型\nlet str:string = 'abc';\n\n// 数字类型\nlet num:number = 10;  //支持进制数\n\n// 数组类型 \nlet arr:number[] = [1, 2, 3];  //数字类型的数组\nlet arrStr:string[] = ['a', 'b'];  //字符串类型的数组\n// 另外一种方法\nlet arr2:Array<number> = [1, 2 ,3];\n\n// 元祖 typle （多种类型混合到一种类型中）\n// 比如：数组中包括字符串 和 数字\nlet per:[number, string];\nper = [1, 'a'];  // 注意：要按照声明时的顺序赋值\n\n// 枚举 enum （ts对js扩展的体现）\nenum Season{Spring, Summer, Autumn, Winter }; //声明一个枚举类型，并且里面有4个值\nlet season:Season = Season.Spring;\n\nenum Season1{Spring=1, Summer=3, Autumn=5, Winter=7 }; // 下标初始值改成1\n\nlet season1:string = Season1[1] // 把Season中下标1的spring赋值到season1中并且改为string类型\n// 并且，赋值之前的类型只能继承下来,不能改变\n\n// 任意值 any （开发中不确定类型时，多用到）\nlet a:number = 10;\nlet b:any = 4; b = 'string'; // 类型为any时，可以再赋值为别的类型\n\n// null 和 undefined 其他类型的子类型\nlet c:undefined = undefined; c = 10 //可以把null和undefied类型的变量赋值给其他类型\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);