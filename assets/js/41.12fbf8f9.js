(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{341:function(t,s,v){"use strict";v.r(s);var _=v(10),p=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"angular基础知识-4-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#angular基础知识-4-2"}},[t._v("#")]),t._v(" Angular基础知识 （4-2）")]),t._v(" "),s("h3",[t._v(" 1. 组件的封装、组件之间的数据传递")]),t._v(" "),s("p",[t._v("执行"),s("code",[t._v("ng g component xxx")]),t._v(", 就会默认在app路径下注册组件，并在app.module.ts中引入地址。")]),t._v(" "),s("p",[s("b",[t._v("组件之间的通讯会有3种关系:")])]),t._v(" "),s("ol",[s("li",[t._v("父子关系")]),t._v(" "),s("li",[t._v("兄弟关系")]),t._v(" "),s("li",[t._v("没有直接关系")])]),t._v(" "),s("p",[t._v("通常采用下列方式处理(某些方式是框架特有)组件间的通讯, 如下:")]),t._v(" "),s("ol",[s("li",[t._v("父子组件之间的交互(@Input/@Output/模板变量/@ViewChild)")]),t._v(" "),s("li",[t._v("非父子组件(Service/localStorage)")]),t._v(" "),s("li",[t._v("还可以利用Session等服务器端的解决方法")])]),t._v(" "),s("p",[s("b",[t._v(" 1-1 父子组件数据传递")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("1-1-1 在父组件设置子组件上面的的属性")]),t._v(" "),s("p",[t._v("通过@input绑定子组件的属性,注意属性得是公开public的,私有private属性是无法传递的")]),t._v(" "),s("p",[t._v("es6新语法get/set.为属性提供了一个方便习惯的读/写方式, 拦截属性的存取行为。")]),t._v(" "),s("p",[t._v("在父组件设置该属性,就能够通过set方法来修改,从而实现在父组件设置子组件属性")]),t._v(" "),s("p",[t._v("代码如下")])]),t._v(" "),s("p",[t._v("子组件header.component.ts:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/17102f3f57bce321?w=1023&h=622&f=png&s=37449",alt:""}})]),t._v(" "),s("p",[t._v("父组件app.component.html:\n"),s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/17102f431fc28e1a?w=710&h=260&f=png&s=8712",alt:""}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("1-1-2 父组件直接调用子组件的方法")]),t._v(" "),s("p",[t._v("通过模板内部定义子组件变量,在父组件上可以直接调用子组件的方法,如下:")])]),t._v(" "),s("p",[t._v("子组件header.component.ts:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/23/1710307b99f7bbd1?w=930&h=670&f=png&s=53032",alt:""}})]),t._v(" "),s("p",[t._v("父组件app.component.html:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/23/1710308985473fdb?w=880&h=245&f=png&s=23391",alt:""}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("1-1-3 父组件接受子组件派发的事件")]),t._v(" "),s("p",[t._v("通过@Output在子组件绑定一个事件发射器,在父组件通过事件绑定监听该事件")]),t._v(" "),s("p",[t._v("这样在子组件派发一个事件,父组件就能够收到。如下")])]),t._v(" "),s("p",[t._v("子组件footer.component.ts:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/23/171030ab961597d5?w=919&h=536&f=png&s=44792",alt:""}})]),t._v(" "),s("p",[t._v("父组件app.component.html:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/23/171030b98baef7b7?w=906&h=243&f=png&s=22484",alt:""}})]),t._v(" "),s("h3",[t._v("2. 组件的生命周期 ")]),t._v(" "),s("h3",[t._v("3. 服务 service ")]),t._v(" "),s("h3",[t._v("4. 路由 ")])])}),[],!1,null,null,null);s.default=p.exports}}]);